-- Smart Reels Database Schema
-- Version 1.0.0
--
-- This script sets up all necessary tables, types, and policies
-- for the Smart Reels application to function.

-- 1. Create custom type for content sources
-- This provides better type safety for the 'source' column.
CREATE TYPE public.content_source AS ENUM ('youtube', 'twitter', 'rss');

-- 2. Create the main 'content' table
-- This table stores all the ingested video/article data.
CREATE TABLE public.content (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  title TEXT NOT NULL,
  source public.content_source NOT NULL,
  url TEXT UNIQUE NOT NULL,
  summary TEXT,
  tags TEXT[],
  duration_sec INTEGER,
  author TEXT,
  thumbnail TEXT
);

-- Enable Row Level Security (RLS) on the 'content' table.
ALTER TABLE public.content ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow public read access to all content.
CREATE POLICY "Allow public read access to content" ON public.content
FOR SELECT USING (true);


-- 3. Create the 'curated_channels' table
-- This table stores the YouTube channels that users want to pull content from.
CREATE TABLE public.curated_channels (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  channel_id TEXT UNIQUE NOT NULL,
  channel_name TEXT,
  channel_url TEXT
);

-- Enable RLS on the 'curated_channels' table.
ALTER TABLE public.curated_channels ENABLE ROW LEVEL SECURITY;

-- Create a policy to allow public read access to the channel list.
CREATE POLICY "Allow public read access to channels" ON public.curated_channels
FOR SELECT USING (true);

-- Create policies to allow authenticated users to manage the channel list.
-- For a multi-tenant app, you would scope this to a user or organization ID.
CREATE POLICY "Allow insert for authenticated users" ON public.curated_channels
FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Allow delete for authenticated users" ON public.curated_channels
FOR DELETE TO authenticated USING (true);


-- 4. Create the 'seen_content' table
-- This table creates a join between users and content they have viewed.
CREATE TABLE public.seen_content (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  content_id BIGINT NOT NULL REFERENCES public.content(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,

  -- A user can only have one 'seen' record per video.
  UNIQUE(user_id, content_id)
);

-- Enable RLS on the 'seen_content' table.
ALTER TABLE public.seen_content ENABLE ROW LEVEL SECURITY;

-- Create policies for users to manage their own 'seen' history.
CREATE POLICY "Users can insert their own seen records"
ON public.seen_content FOR INSERT
TO authenticated WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can read their own seen records"
ON public.seen_content FOR SELECT
TO authenticated USING (auth.uid() = user_id);

-- 5. Enable Authentication Providers
-- This part is a reminder to enable authentication in the Supabase UI.
-- Go to Authentication -> Providers and enable the 'Email' provider.
-- You can also enable social providers like Google or GitHub.